import { defaultState } from '../../libs/blocks/caas/utils.js';

const c = {
  collection: {
    mode: 'lightest', // ?
    layout: {
      type: '3up',
      gutter: '4x',
      container: '1200MaxWidth',
    },
    lazyload: '',
    button: { style: 'primary' },
    resultsPerPage: '3',
    endpoint:
      'https://www.adobe.com/chimera-api/collection?contentSource=&originSelection=Northstar%2CMarketo%2CMagento%2CWorkfront%2CExperienceLeague&contentTypeTags=&collectionTags=&excludeContentWithTags=&language=en&country=us&complexQuery=%28%28%22adobe-com-enterprise%3Aproduct%2Fmagento-commerce%22+OR+%22caas%3Aproducts%2Fadobe-commerce%22%29%29&excludeIds=d0a0d317-bdbc-35b2-a779-cb1ad14191f7&currentEntityId=a2086bf4-c9f2-3136-b76f-66e0e5fa7625&featuredCards=&environment=&size=500',
    fallbackEndpoint: '',
    totalCardsToShow: '500',
    cardStyle: '1:2',
    showTotalResults: 'false',
    i18n: {
      prettyDateIntervalFormat: '{ddd}, {LLL} {dd} | {timeRange} {timeZone}',
      totalResultsText: '{total} results',
      title: '',
      titleHeadingLevel: 'h2',
      onErrorTitle: 'Sorry there was a system error.',
      onErrorDescription:
        'Please try reloading the page or try coming back to the page another time.',
    },
    setCardBorders: 'true',
    useOverlayLinks: 'false',
    banner: {
      register: {
        description: 'Sign Up',
        url: '#registration',
      },
      upcoming: { description: 'Upcoming' },
      live: { description: 'Live' },
      onDemand: { description: 'On Demand' },
    },
    useLightText: 'false',
    disableBanners: 'false',
    reservoir: {
      sample: '3',
      pool: '1000',
    },
    ctaAction: '',
    additionalRequestParams: {},
  },
  featuredCards: '[]',
  filterPanel: {
    enabled: 'false',
    eventFilter: '',
    type: 'left',
    showEmptyFilters: 'false',
    filters: [],
    filterLogic: 'or',
    i18n: {
      leftPanel: {
        header: 'Refine Your Results',
        clearAllFiltersText: 'Clear All',
        mobile: {
          filtersBtnLabel: 'Filters',
          panel: {
            header: 'Filter by',
            totalResultsText: '{total} results',
            applyBtnText: 'Apply',
            clearFilterText: 'Clear',
            doneBtnText: 'Done',
          },
          group: {
            totalResultsText: '{total} results',
            applyBtnText: 'Apply',
            clearFilterText: 'Clear',
            doneBtnText: 'Done',
          },
        },
      },
      topPanel: {
        groupLabel: 'Filters:',
        clearAllFiltersText: 'Clear All',
        moreFiltersBtnText: 'More Filters +',
        mobile: {
          group: {
            totalResultsText: '{total} results',
            applyBtnText: 'Apply',
            clearFilterText: 'Clear',
            doneBtnText: 'Done',
          },
        },
      },
    },
  },
  sort: {
    enabled: 'false',
    defaultSort: 'random',
    options: [],
  },
  pagination: {
    animationStyle: 'paged',
    enabled: 'false',
    resultsQuantityShown: 'false',
    loadMoreButton: {
      style: 'primary',
      useThemeThree: 'true',
    },
    type: 'loadMore',
    i18n: {
      loadMore: {
        btnText: 'Load More',
        resultsQuantityText: '{start} of {end} displayed',
      },
      paginator: {
        resultsQuantityText: '{start} - {end} of {total} results',
        prevLabel: 'Prev',
        nextLabel: 'Next',
      },
    },
  },
  bookmarks: {
    showOnCards: 'false',
    leftFilterPanel: {
      bookmarkOnlyCollection: 'false',
      showBookmarksFilter: 'false',
      selectBookmarksIcon: '',
      unselectBookmarksIcon: '',
    },
    i18n: {
      leftFilterPanel: { filterTitle: 'My favorites' },
      card: {
        saveText: 'Save Card',
        unsaveText: 'Unsave Card',
      },
    },
  },
  search: {
    enabled: 'true',
    searchFields: [],
    i18n: {
      noResultsTitle: 'No Results Found',
      noResultsDescription: 'Try checking your spelling or broadening your search.',
      leftFilterPanel: {
        searchTitle: 'Search',
        searchPlaceholderText: 'Search Here',
      },
      topFilterPanel: { searchPlaceholderText: 'Search Here' },
      filterInfo: { searchPlaceholderText: 'Search Here' },
    },
  },
  language: 'en',
  country: 'US',
  analytics: {
    trackImpressions: '',
    collectionIdentifier: '',
  },
  target: {
    enabled: '',
    lastViewedSession: '',
  },
  customCard: ['return `<div>Please author a valid custom card key</div>`'],
};


const getState = () => ({
  analyticsTrackImpression: false,
  analyticsCollectionName: '',
  andLogicTags: [],
  bookmarkIconSelect: '',
  bookmarkIconUnselect: '',
  cardStyle: c.collection.cardStyle,
  collectionBtnStyle: c.collection.button.style,
  collectionSize: '',
  container: c.collection.layout.container,
  country: 'caas:country/us',
  contentTypeTags: [],
  disableBanners: c.collection.disableBanners,
  draftDb: false,
  environment: '',
  endpoint: 'www.adobe.com/chimera-api/collection',
  excludeTags: [],
  excludedCards: [],
  fallbackEndpoint: '',
  featuredCards: [],
  filterEvent: c.filterPanel.eventFilter,
  filterLocation: c.filterPanel.type,
  filterLogic: c.filterPanel.filterLogic,
  filters: c.filterPanel.filters,
  filtersShowEmpty: c.filterPanel.showEmptyFilters,
  gutter: c.collection.layout.gutter,
  includeTags: [],
  language: 'caas:language/en',
  layoutType: c.collection.layout.type,
  loadMoreBtnStyle: 'primary',
  onlyShowBookmarkedCards: false,
  orLogicTags: [],
  paginationAnimationStyle: 'paged',
  paginationEnabled: false,
  paginationQuantityShown: false,
  paginationUseTheme3: false,
  paginationType: 'none',
  placeholderUrl: '',
  resultsPerPage: c.collection.resultsPerPage,
  searchFields: [],
  setCardBorders: c.collection.setCardBorders,
  showBookmarksFilter: false,
  showBookmarksOnCards: false,
  showFilters: c.filterPanel.enabled,
  showSearch: false,
  showTotalResults: c.collection.showTotalResults,
  sortDefault: c.sort.defaultSort,
  sortEnablePopup: c.sort.enabled,
  sortEnableRandomSampling: false,
  sortReservoirSample: c.collection.reservoir.sample,
  sortReservoirPool: c.collection.reservoir.pool,
  source: ['hawks'],
  tagsUrl: 'www.adobe.com/chimera-api/tags',
  targetActivity: '',
  targetEnabled: false,
  theme: c.collection.mode,
  totalCardsToShow: c.collection.totalCardsToShow,
  useLightText: c.collection.useLightText,
  useOverlayLinks: c.collection.useOverlayLinks,
  userInfo: [],
});

const strings = () => ({
  prettyDateIntervalFormat: c.collection.i18n.prettyDateIntervalFormat,
  totalResults: c.collection.i18n.totalResultsText,
  collectionTitle: c.collection.i18n.title,
  onErrorTitle: c.collection.i18n.onErrorTitle,
  onErrorDescription: c.collection.collection.onErrorDesc,
  registrationText: c.collection.banner.register.description,
  registrationUrl: c.collection.banner.register.url,
  upComingText: c.collection.banner.upcoming.description,
  liveText: c.collection.banner.live.description,
  onDemandText: c.collection.banner.onDemand.description,
  filterLeftPanel: c.filterPanel.i18n.leftPanel.header,
  filterClearAll: c.filterPanel.i18n.leftPanel.clearAllFiltersText,
  filterMobileButton: c.filterPanel.i18n.leftPanel.mobile.filtersBtnLabel,
  filterMobilePanel: c.filterPanel.i18n.leftPanel.mobile.panel.header,
  // TODO: totalResults used in multiple places
  // totalResults: c.filterPanel.i18n.leftPanel.mobile.panel.totalResultsText,
  filterApply: c.filterPanel.i18n.leftPanel.mobile.panel.applyBtnText,
  filterClear: c.filterPanel.i18n.leftPanel.mobile.panel.clearFilterText,
  filterDone: c.filterPanel.i18n.leftPanel.mobile.panel.doneBtnText,
  // totalResults: c.filterPanel.i18n.leftPanel.mobile.group.totalResultsText,
  filterApply: c.filterPanel.i18n.leftPanel.mobile.group.applyBtnText,
  filterClear: c.filterPanel.i18n.leftPanel.mobile.group.clearFilterText,
  filterDone: c.filterPanel.i18n.leftPanel.mobile.group.doneBtnText,
  filterGroupLabel: c.filterPanel.i18n.topPanel.groupLabel,
  filterClearAll: c.filterPanel.i18n.topPanel.clearAllFiltersText,
  filterClearAll: c.filterPanel.i18n.topPanel.clearAllFiltersText,
  filtermore: c.filterPanel.i18n.topPanel.moreFiltersBtnText,
  totalResults: c.filterPanel.i18n.topPanel.mobile.group.totalResultsText,
  filterApply: c.filterPanel.i18n.topPanel.mobile.group.applyBtnText,
  filterClear: c.filterPanel.i18n.topPanel.mobile.group.clearFilterText,
  filterDone: c.filterPanel.i18n.topPanel.mobile.group.doneBtnText,
});

const parseCaasConfig = (conf) => {
  const config = typeof conf === 'string' ? JSON.parse(conf) : conf;

};
